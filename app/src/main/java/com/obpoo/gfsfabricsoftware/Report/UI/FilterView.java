package com.obpoo.gfsfabricsoftware.Report.UI;import android.app.DatePickerDialog;import android.content.DialogInterface;import android.support.v7.app.AlertDialog;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.Toolbar;import android.view.Gravity;import android.widget.DatePicker;import android.widget.TextView;import com.obpoo.gfsfabricsoftware.PurchaseOrder.DataModel.AddPOModel.AddPoPojo;import com.obpoo.gfsfabricsoftware.PurchaseOrder.DataModel.AddPOModel.ModifyNotes;import com.obpoo.gfsfabricsoftware.PurchaseOrder.DataModel.TrackPoModel.TrackPOByCusRes;import com.obpoo.gfsfabricsoftware.PurchaseOrder.DataModel.TrackPoModel.TrackPODetRes;import com.obpoo.gfsfabricsoftware.PurchaseOrder.DataModel.ViewPOModel.ConfirmPOResponse;import com.obpoo.gfsfabricsoftware.PurchaseOrder.DataModel.ViewPOModel.FilterDatum;import com.obpoo.gfsfabricsoftware.PurchaseOrder.DataModel.ViewPOModel.PoFilterResponse;import com.obpoo.gfsfabricsoftware.PurchaseOrder.DataModel.ViewPOModel.poPOJO;import com.obpoo.gfsfabricsoftware.PurchaseOrder.MVP.PoPresenterImpl;import com.obpoo.gfsfabricsoftware.PurchaseOrder.MVP.PoView;import com.obpoo.gfsfabricsoftware.R;import com.obpoo.gfsfabricsoftware.ui.activities.BaseActivity;import java.util.ArrayList;import java.util.Calendar;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;public class FilterView extends BaseActivity implements PoView {    @BindView(R.id.status_et)    TextView status_et;    @BindView(R.id.from_date)    TextView from_date;    @BindView(R.id.to_date)    TextView to_date;    @BindView(R.id.confirm)    TextView confirm;    PoPresenterImpl presenter;    CharSequence[] statusList;    ArrayList<FilterDatum> filterData = new ArrayList<>();    ArrayList<String> countries = new ArrayList<>();    String d1, d2;    private int mYear, mMonth, mDay;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_filter_view2);        ButterKnife.bind(this);        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);        toolbar.setTitle("Manage/CreatePO");        setSupportActionBar(toolbar);        enableActionBar(true);        presenter = new PoPresenterImpl(this);        status_et.setGravity(Gravity.CENTER_VERTICAL);        from_date.setGravity(Gravity.CENTER_VERTICAL);        to_date.setGravity(Gravity.CENTER_VERTICAL);    }    @OnClick(R.id.status_et)    public void statusClick() {        presenter.onVIewFilter("status_view");    }    @OnClick(R.id.from_date)    public void fromDateClick() {        showDatePicker();    }    @OnClick(R.id.to_date)    public void toDateClick() {        showDatePicker2();    }    @OnClick(R.id.confirm)    public void confirmClick() {    }    @Override    public void onShowViewPO(poPOJO response) {    }    @Override    public void onShowAddPO(AddPoPojo response) {    }    @Override    public void onConfirmPO(ConfirmPOResponse response) {    }    @Override    public void onValidationfail(int type) {    }    @Override    public void onTrackPObyCustomer(TrackPOByCusRes response) {    }    @Override    public void onTrackPOdetails(TrackPODetRes response) {    }    @Override    public void onModifyNotes(ModifyNotes response) {    }    @Override    public void onShowFilter(PoFilterResponse response) {        if (response.getStatus().equals("success")) {            filterData = response.getData();            for (int i = 0; i < filterData.size(); i++) {                countries.add(filterData.get(i).getName());            }            selectStatus();        }    }    @Override    public void showDialog() {    }    @Override    public void hideDialog() {    }    @Override    public void showError(String message) {    }    public void selectStatus() {        statusList = countries.toArray(new CharSequence[0]);        AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(FilterView.this);        dialogBuilder.setItems(statusList, new DialogInterface.OnClickListener() {            public void onClick(DialogInterface dialog, int item) {                String selectedText = statusList[item].toString();                status_et.setText(selectedText);            }        });        AlertDialog alertDialogObject = dialogBuilder.create();        //Show the dialog        alertDialogObject.show();    }    private void showDatePicker() {        final Calendar c = Calendar.getInstance();        mYear = c.get(Calendar.YEAR);        mMonth = c.get(Calendar.MONTH);        mDay = c.get(Calendar.DAY_OF_MONTH);        DatePickerDialog.OnDateSetListener dateSetListener = new DatePickerDialog.OnDateSetListener() {            @Override            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {                d1 = String.valueOf(new StringBuilder().append(year).append("-").append(month + 1).append("-").append(dayOfMonth));                from_date.setText(d1);            }        };        DatePickerDialog datePickerDialog = new DatePickerDialog(this, dateSetListener, mYear, mMonth, mDay);        datePickerDialog.show();    }    private void showDatePicker2() {        final Calendar c = Calendar.getInstance();        mYear = c.get(Calendar.YEAR);        mMonth = c.get(Calendar.MONTH);        mDay = c.get(Calendar.DAY_OF_MONTH);        DatePickerDialog.OnDateSetListener dateSetListener = new DatePickerDialog.OnDateSetListener() {            @Override            public void onDateSet(DatePicker view, int year, int month, int dayOfMonth) {                d2 = String.valueOf(new StringBuilder().append(year).append("-").append(+month + 1).append("-").append(dayOfMonth));                to_date.setText(d2);            }        };        DatePickerDialog datePickerDialog = new DatePickerDialog(this, dateSetListener, mYear, mMonth, mDay);        datePickerDialog.show();    }}