package com.obpoo.gfsfabricsoftware.Report.UI;import android.content.Intent;import android.support.annotation.NonNull;import android.support.v7.app.AppCompatActivity;import android.os.Bundle;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.View;import android.widget.AbsListView;import android.widget.ImageView;import android.widget.ProgressBar;import com.obpoo.gfsfabricsoftware.R;import com.obpoo.gfsfabricsoftware.Report.Adapter.PoDetailAdapter;import com.obpoo.gfsfabricsoftware.Report.DataModel.Bill_Invoice_Report_Model.Bill_Invoice_Response_data;import com.obpoo.gfsfabricsoftware.Report.DataModel.CheckIn.CheckInResponse;import com.obpoo.gfsfabricsoftware.Report.DataModel.CheckOUt.CheckOutResponse;import com.obpoo.gfsfabricsoftware.Report.DataModel.Customer_Pending_Model.CustomerPendingResponse;import com.obpoo.gfsfabricsoftware.Report.DataModel.CutStock.CutStockResponse;import com.obpoo.gfsfabricsoftware.Report.DataModel.FabricAnalytics.FabricAnalyticsResponse;import com.obpoo.gfsfabricsoftware.Report.DataModel.FabricHistory.FabricGraphResponse;import com.obpoo.gfsfabricsoftware.Report.DataModel.FabricHistory.FabricHistoryResponse;import com.obpoo.gfsfabricsoftware.Report.DataModel.POLeftOver_Model.POleftOverResponse;import com.obpoo.gfsfabricsoftware.Report.DataModel.PO_Fabric_List.PO_Fabric_Response;import com.obpoo.gfsfabricsoftware.Report.DataModel.PaymentsReceived.PaymentRecResponse;import com.obpoo.gfsfabricsoftware.Report.DataModel.PurchaseOrderDetails.PoDetailsRespoDet;import com.obpoo.gfsfabricsoftware.Report.DataModel.PurchaseOrderDetails.PoDetailsresponse;import com.obpoo.gfsfabricsoftware.Report.DataModel.SoldFabrics.SoldFabricsResponse;import com.obpoo.gfsfabricsoftware.Report.MVP.ReportPresenterImpl;import com.obpoo.gfsfabricsoftware.Report.MVP.ReportView;import java.text.DateFormat;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Calendar;import java.util.Date;import butterknife.BindView;import butterknife.ButterKnife;import butterknife.OnClick;public class PoDetailReport extends AppCompatActivity implements ReportView {    @BindView(R.id.tranparent_bg)    ImageView tranparent_bg;    @BindView(R.id.back_PO_cmngrp)    ImageView back_PO_cmngrp;    @BindView(R.id.filter)    ImageView filter;    @BindView(R.id.progressbar)    ProgressBar progressbar;    @BindView(R.id.recycler_view)    RecyclerView recycler_view;    ReportPresenterImpl presenter;    String todate, fromdate;    int page_no = 1;    ArrayList<PoDetailsRespoDet> data = new ArrayList<>();    ArrayList<PoDetailsRespoDet> data1 = new ArrayList<>();    PoDetailAdapter adapter;    Boolean isScrolling = false;    int currentItems, totalItems, scrollOutItems;    LinearLayoutManager lm;    @Override    protected void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_po_detail_report);        ButterKnife.bind(this);        presenter = new ReportPresenterImpl(this);        lm = new LinearLayoutManager(PoDetailReport.this);        lm.setOrientation(LinearLayoutManager.VERTICAL);        recycler_view.setLayoutManager(lm);        DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd");        Date date = new Date();        todate = dateFormat.format(date);        Calendar cal = Calendar.getInstance();        cal.add(Calendar.DATE, -7);        Date todate1 = cal.getTime();        DateFormat dateFormat1 = new SimpleDateFormat("yyyy-MM-dd");        fromdate = dateFormat1.format(todate1);        presenter.onSend_PO_Detail("FilterView_prcs_pagn", "ALL", todate, fromdate, String.valueOf(page_no));        adapter = new PoDetailAdapter(PoDetailReport.this, data);        recycler_view.setAdapter(adapter);    }    @OnClick(R.id.filter)    public void filterClick() {        startActivity(new Intent(PoDetailReport.this, FilterViewReport.class));    }    @Override    public void onBill_Invoice_Report(Bill_Invoice_Response_data response) {    }    @Override    public void onCustomer_pending_Report(CustomerPendingResponse response) {    }    @Override    public void onCutStock_report(CutStockResponse response) {    }    @Override    public void onFabricAnalytics(FabricAnalyticsResponse response) {    }    @Override    public void onfabricNames(FabricHistoryResponse response) {    }    @Override    public void onFabricHistory(FabricGraphResponse response) {    }    @Override    public void onPaymentReceived(PaymentRecResponse response) {    }    @Override    public void onPOdetails(PoDetailsresponse response) {        if (response.getStatus().equals("success")) {            data1 = response.getData();            data.addAll(data1);            adapter.notifyDataSetChanged();            recycler_view.addOnScrollListener(new RecyclerView.OnScrollListener() {                @Override                public void onScrollStateChanged(@NonNull RecyclerView recyclerView, int newState) {                    super.onScrollStateChanged(recyclerView, newState);                    if (newState == AbsListView.OnScrollListener.SCROLL_STATE_TOUCH_SCROLL) {                        isScrolling = true;                    }                }                @Override                public void onScrolled(@NonNull RecyclerView recyclerView, int dx, int dy) {                    super.onScrolled(recyclerView, dx, dy);                    currentItems = lm.getChildCount();                    totalItems = lm.getItemCount();                    scrollOutItems = lm.findFirstVisibleItemPosition();                    if (isScrolling && (currentItems + scrollOutItems == totalItems)) {                        isScrolling = false;                        page_no++;                        presenter.onSend_PO_Detail("FilterView_prcs_pagn", "ALL", todate, fromdate, String.valueOf(page_no));                    }                }            });        }    }    @Override    public void onPOfabricList(PO_Fabric_Response response) {    }    @Override    public void onPOleftovers(POleftOverResponse response) {    }    @Override    public void onCheckIn(CheckInResponse response) {    }    @Override    public void onCheckOut(CheckOutResponse response) {    }    @Override    public void onSoldFabrics(SoldFabricsResponse response) {    }    @Override    public void onItemEasyReport(SoldFabricsResponse response) {    }    @Override    public void showDialog() {        tranparent_bg.setVisibility(View.VISIBLE);        progressbar.setVisibility(View.VISIBLE);    }    @Override    public void hideDialog() {        tranparent_bg.setVisibility(View.GONE);        progressbar.setVisibility(View.GONE);    }    @Override    public void showError(String message) {    }}